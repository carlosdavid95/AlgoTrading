#-----------------------------------------


import numpy as np                 # Mathematical computation package
import talib as ta                 # Trading Analytics Library
import pandas as pd                # Data science fundamentals package
import seaborn as sns              # Advanced visual graphics package
from tqdm.notebook import tqdm     # Loop progress bar
import matplotlib.pyplot as plt    # Visual graphics package


# Define Portfolio

tickers_bb = ('aapl, msft, v, nvda, ma, pypl, intc, adbe, crm, avgo, csco, acn, txn, qcom, orcl, amat, ibm, now, intu, mu, amd, fis, lrcx, adp, fisv')
start_bb = '2015-07-01'
end_bb = '2018-12-31'
start2_bb = '2018-12-31'
end2_bb = '2020-12-31'

# Get stock adjusted closed prices data from Yahoo Finance using the bt package
riskfree_bb = bt.get('^IRX', start=start_bb)
riskfree_rate_bb = float(riskfree_bb.mean())/100
data_bb = bt.get(tickers_bb, start = start_bb, end = end_bb)
data2_bb = bt.get(tickers_bb, start = start2_bb, end = end2_bb)


plt.rcParams["figure.figsize"] = (15, 5) # Set figure size for notebook

# Placeholder for bands
upper_bands = []
middle_bands = []
lower_bands = []

# Loop over each ticker in data
for tickers_bb in data_bb.columns:

    # Calculate BBANDS
    upper, middle, lower  = ta.BBANDS(data_bb[tickers_bb],     # Data
                                      timeperiod = 30,  # n Period simple moving average
                                      nbdevup    = 1,   # k Standard deviation upwards  
                                      nbdevdn    = 1)   # k Standard deviation downwards
    upper_bands.append(upper)
    middle_bands.append(middle)
    lower_bands.append(lower)
    
    # Plot the BBANDS
    plt.figure(figsize=(15, 5))
    plt.plot(data_bb[tickers_bb], color='green', label='Price')
    plt.plot(upper, color='tomato', label="Upper σ")
    plt.plot(middle, color='blue', label='SMA Period')
    plt.plot(lower, color='tomato', label='Lower σ')

    # Customize and show the plot
    plt.legend(loc='upper left')
    plt.title(tickers_bb+' (σ)', fontsize=25)
    plt.show()  
    
    ## Define Signal

# Create placeholder for signal
lower_bands_df = pd.DataFrame()

# Copy over lower bands for our tickers and transpose the dataframe
lower_bands_df = pd.DataFrame.from_records(data = lower_bands).T

# Rename columns to match our adjustced close dataframe
lower_bands_df.columns = data_bb.columns

# Define signal as True when adjust close is less than lower band
signal_bb = data_bb < lower_bands_df

# Define the strategy
strategy_bb = bt.Strategy('Bollinger Bands',
                       [bt.algos.SelectWhere(signal_bb),         
                        bt.algos.WeighEqually(),
                        bt.algos.Rebalance()])

# Create the Backtest algorithm using the historical adjusted close
backtest_bbands = bt.Backtest(strategy_bb, data_bb)

# Run the backtest and store the results
results_bb = bt.run(backtest_bbands)
results_bb.set_riskfree_rate(riskfree_rate_bb)

# Plot equity progression
results_bb.display()
results_bb.plot()
# Placeholder for bands
upper_bands2 = []
middle_bands2 = []
lower_bands2 = []

# Loop over each ticker in data
for ticker in data2_bb.columns:

    # Calculate BBANDS
    upper, middle, lower  = ta.BBANDS(data2_bb[tickers_bb],    # Data
                                      timeperiod = 30,  # n Period simple moving average
                                      nbdevup    = 1,   # k Standard deviation upwards  
                                      nbdevdn    = 1)   # k Standard deviation downwards
    upper_bands2.append(upper)
    middle_bands2.append(middle)
    lower_bands2.append(lower)
    
## Define Signal

# Create placeholder for signal
lower_bands_df2 = pd.DataFrame()

# Copy over lower bands for our tickers and transpose the dataframe
lower_bands_df2 = pd.DataFrame.from_records(data = lower_bands2).T

# Rename columns to match our adjustced close dataframe
lower_bands_df2.columns = data_bb.columns

# Define signal as True when adjust close is less than lower band
signal2_bb = data2_bb < lower_bands_df2

# Define the strategy
strategy2_bb = bt.Strategy('Bollinger Bands',
                       [bt.algos.SelectWhere(signal2_bb),         
                        bt.algos.WeighEqually(),
                        bt.algos.Rebalance()])

# Create the Backtest algorithm using the historical adjusted close
test_bbands_bb = bt.Backtest(strategy2_bb, data2_bb)

# Run the backtest and store the results
results2_bb = bt.run(test_bbands_bb)
results2_bb.set_riskfree_rate(riskfree_rate_bb)

# Plot equity progression
results2_bb.display()
results2_bb.plot()
